(defun 'map 'fn 'ls
  (letrec
    '_map (lambda 'fn 'first 'rest
            (let 'result (fn first)
              (if rest
                (extend
                  (list result)
                  (_map fn (head rest) (tail rest))
                )
                (list result)
              )
            )
          )
    (cond
      ls (extend
           (list)
           (_map fn (head ls) (tail ls))
         )
      true ls
    )
  )
)

(defun 'apply 'fn 'ls
  (letrec
    '_apply (lambda 'fn 'first 'rest
              (body
                (fn first)
                (if rest
                  (_apply fn (head rest) (tail rest))
                )
              )
            )
    (cond
      ls   (_apply fn (head ls) (tail ls))
      true (none)
    )
  )
)

(defun 'filter 'fn 'ls
  (letrec
    '_filter (lambda 'fn 'first 'rest
            (let 'result (if (fn first)
                           (list first)
                           (list)
                         )
              (if rest
                (extend
                  result
                  (_filter fn (head rest) (tail rest))
                )
                result
              )
            )
          )
    (cond
      ls (extend
           (list)
           (_filter fn (head ls) (tail ls))
         )
      true ls
    )
  )
)
