(defun 'map 'fn 'ls
  (letrec
    '_map (lambda 'fn 'first 'rest
            (let 'result (fn first)
              (if rest
                (extend
                  (list result)
                  (_map fn (head rest) (tail rest))
                )
                (list result)
              )
            )
          )
    (if ls
      (extend
        (list)
        (_map fn (head ls) (tail ls))
      )
      ls
    )
  )
)

(defun 'contains 'target 'ls
  (neq
    (findif (lambda 'x (eq target x)) ls)
    (none)
  )
)

(defun 'findif 'fn 'ls
  (letrec
    '_findif (lambda 'fn 'first 'rest
            (if (fn first)
              first
              (if rest
                (_findif fn (head rest) (tail rest))
                (none)
              )
            )
          )
    (if ls
      (_findif fn (head ls) (tail ls))
      (none)
    )
  )
)

(defun 'apply 'fn 'ls
  (letrec
    '_apply (lambda 'fn 'first 'rest
              (body
                (fn first)
                (if rest
                  (_apply fn (head rest) (tail rest))
                )
              )
            )
    (if ls
      (_apply fn (head ls) (tail ls))
      (none)
    )
  )
)

(defun 'filter 'fn 'ls
  (letrec
    '_filter (lambda 'fn 'first 'rest
            (let 'result (if (fn first)
                           (list first)
                           (list)
                         )
              (if rest
                (extend
                  result
                  (_filter fn (head rest) (tail rest))
                )
                result
              )
            )
          )
    (if ls
      (extend
        (list)
        (_filter fn (head ls) (tail ls))
      )
      ls
    )
  )
)

(defun 'accumulate 'fn 'ls 'initial
  (letrec '_accumulate
    (lambda 'fn 'total 'first 'rest
      (if rest
        (_accumulate fn
          (fn total first)
          (head rest)
          (tail rest)
        )
        (fn total first)
      )
    )
    (if ls
      (_accumulate fn initial (head ls) (tail ls))
      initial
    )
  )
)

(defun 'index 'target 'ls
  (letrec '_index
    (lambda 'first 'rest 'idx
      (if (eq target first)
        idx
        (if rest
          (_index (head rest) (tail rest) (+ idx 1))
          (none)
        )
      )
    )
    (if ls
      (_index (head ls) (tail ls) 0)
      (none)
    )
  )
)

# Remove the first item matching target
(defun 'remove 'target 'ls
  (if ls
    (letrec
      '_remove
        (lambda 'first 'rest
          # If we found the thing to remove
          (if (eq target first)
            # Return the rest, dropping the target item
            rest
            # Else continue searching for it while there are items
            (extend
              (list first)
              (if rest
                (_remove
                  (head rest)
                  (tail rest)
                )
                (list)
              )
            )
          )
        )
     (_remove (head ls) (tail ls))
    )
    # For empty list just return it
    ls
  )
)

# TODO: this could also be done as a builtin
(defun 'nth 'idx 'ls
  (letrec '_nth
    (lambda 'rest 'curr_idx
      (if (eq curr_idx idx)
        (head rest)
        (_nth (tail rest) (+ curr_idx 1))
      )
    )
    (if (eq idx 0)
      (head ls)
      (_nth (tail ls) 1)
    )
  )
)

(defun 'empty 'ls
  (eq 0 (len ls))
)

(defun 'max 'ls
  (letrec '_max
    (lambda 'current_max 'first 'rest
      (let 'new_max
             (if (> first current_max)
                first
                current_max
             )
        (if rest
          (_max new_max (head rest) (tail rest))
          new_max
        )
      )
    )
    (_max (head ls) (head ls) (tail ls))
  )
)

# TODO: string lib?
(defun 'split 'str 'char
  (letrec '_split
    # str = remaining chars to process
    # acc = string we accumulate while waiting for a split char
    # parts = already split parts of the string
    (lambda 'str 'acc 'parts
      (if str
        (let 'first_char (head str) 'rest (tail str)
          (if (eq first_char char)
            # Reset accumulator, save the part
            (_split rest ""                 (extend parts (list acc)))
            # Otherwise accumualte the char then carry on with rest
            (_split rest (+ acc first_char) parts)
          )
        )
        # End of string, return all parts including current accumulator
        (extend parts (list acc))
      )
    )
    (_split str "" (list))
  )
)
