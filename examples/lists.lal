(import "lib/lib.lal")

(print "map:")
## "map:"

(print
  (map (lambda 'x (+ x 2))
       (list 1 2 3)
  )
)
## [3 4 5]

# empty list in empty list out
(print
  (map (none) (list))
)
## []

# function called once per item
(print
  (map (lambda 'x (print x))
       (list "A" "B" "C")
  )
)
## "A"
## "B"
## "C"
## [none none none]

(print "apply:")
## "apply:"

# apply is map but ignore the results
(print
  (apply (lambda 'x (body (print x) x))
         (list "D" "E" "F")
  )
)
## "D"
## "E"
## "F"
## none

# nothing in, nothing done
(print
  (apply (none) (list))
)
## none

(print "filter:")
## "filter:"

# empty in empty out
(print
  (filter (none) (list))
)
## []

# removes all items where fn returns false
(print
  (filter (lambda 'x (eq (% x 2) 0))
          (list 1 2 3 4 5)
  )
)
## [2 4]

# predicate called only once per item
(print
  (filter (lambda 'x (body (print x) false))
          (list 1 2 3 4 5)
  )
)
## 1
## 2
## 3
## 4
## 5
## []

(print "accumulate:")
## "accumulate:"

# nothing in no work done
(print
  (accumulate (lambda 'x (print x)) (list) 0)
)
## 0

# running total of a list
(print
  (accumulate (lambda 'x 'y (+ x y)) (list 1 2 3) 0)
)
## 6

# Works with strings too, e.g. a Python style join()
(print
  (accumulate (lambda 's1 's2
                (if s1
                  (+ s1 ", " s2)
                  (+ s2)
                )
              )
              (list "1" "2" "3") ""
  )
)
## "1, 2, 3"

(print "index:")
## "index:"
# index returns index of a given value in a list
# returns none if not found

(print (index 3 (list 1 2 3 4)))
## 2

(print (index "a" "defg"))
## none

(print (index 99 (list)))
## none

(print "nth:")
## "nth:"

# returns the nth item in a list/string
# errors if you ask for something out of bounds
(print (nth 0 (list 1)))
## 1
(print (nth 2 "abc"))
## "c"

(print "empty:")
## "empty:"

(print (empty (list)))
## true
(print (empty (list 1 2 3)))
## false

(print "findif:")
## "findif:"
# Find first odd number
(print (findif (lambda 'x (neq (% x 2) 0)) (list 2 4 6 7 9)))
## 7
(print (findif (lambda 'x (+ true)) (list)))
## none
(let 'ls (list "goods" "foods")
  (body
    (print (findif (lambda 's (eq (tail s) "ood")) ls))
## none
    (print (findif (lambda 's (eq (tail s) "oods")) ls))
## "goods"
  )
)

(print "contains:")
## "contains:"
(print (contains 1 (list)))
## false
(print (contains "b" "abc"))
## true
(print (contains 9 (list 2 7 0)))
## false

(print "Remove:")
## "Remove:"
(print (remove 1 (list)))
## []
(print (remove 3 (list 1 2 3)))
## [1 2]
(print (remove 5 (list 1 2 3)))
## [1 2 3]
(print (remove "o" "food"))
## [1 2 3]


## Return value: none
