(import "lib/lib.lal")
# map: list of result of fn on each item
(print
  (map (lambda 'x (+ x 2))
       (list 1 2 3)
  )
)
# map: empty list in empty list out
(print
  (map (none) (list))
)
# map: function called once per item
(print
  (map (lambda 'x (print x))
       (list "A" "B" "C")
  )
)
# apply: map but ignore the results
(print
  (apply (lambda 'x (body (print x) x))
         (list "D" "E" "F")
  )
)
# apply: nothing in, nothing done
(print
  (apply (none) (list))
)
# filter: empty in empty out
(print
  (filter (none) (list))
)
# filter: removes all items where fn returns false
(print
  (filter (lambda 'x (eq (% x 2) 0))
          (list 1 2 3 4 5)
  )
)
# filter: predicate called only once per item
(print
  (filter (lambda 'x (body (print x) false))
          (list 1 2 3 4 5)
  )
)
# accumulate: nothing in no work done
(print
  (accumulate (lambda 'x (print x)) (list) 0)
)
# accumulate: keep running total of a list
(print
  (accumulate (lambda 'x 'y (+ x y)) (list 1 2 3) 0)
)
# accumulate: can also apply to strings, e.g. a Python style join()
(print
  (accumulate (lambda 's1 's2
                (if s1
                  (+ s1 ", " s2)
                  (+ s2)
                )
              )
              (list "1" "2" "3") ""
  )
)
