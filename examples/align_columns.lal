# https://rosettacode.org/wiki/Align_columns
(import "lib/lib.lal")

# Given a list of rows, each of which is a list of column widths,
# return a list of min column widths for the whole set of rows.
(defun 'min_col_widths 'rows
  (accumulate
    # TODO: function names should be resolved in symbol lookup
    (lambda
      'current 'next_row
      (map
        (lambda 'pair (max pair))
        # This allows us to pad with 0 when columns are not
        # in one of the rows
        (ziplongest current next_row 0)
      )
    )
    rows
    (list)
  )
)

# Given a string, return a string padded to width
# with spaces with the given alignment.
# 0 = left
# 1 = right
# TODO: 2 = center?
(defun 'align_str 'str 'width 'alignment
  (letrec '_align_str
    (lambda 'str
      # If the string is greater than the width we're aligning to
      (if (>= (len str) width)
        # We're done/the string was already wide enough
        str
        # Otherwise we loop again after adding another padding space
        (_align_str
          # Choose what side space goes on, based on alignment
          (cond
            (eq alignment 0) (+ str " ")
            (eq alignment 1) (+ " " str)
          )
        )
      )
    )
    (_align_str str)
  )
)

# Align each string in the row to 'width
# We assume than len of row is <= len of widths
(defun 'align_columns 'row 'widths 'alignment
  (map
    (lambda 'col_width
      (align_str (nth 0 col_width) (nth 1 col_width) alignment)
    )
    (zip row widths)
  )
)

# Print the given row aligned to the column widths
# in 'widths, aligned by 'alignment.
# (we assume at this point (len widths) >= (len rows))
(defun 'print_aligned_row 'row 'widths 'alignment
  (print
    # Join each column with a single space
    (accumulate
      (lambda 's 'column (+ s " " column))
      (align_columns row widths alignment)
      ""
    )
  )
)

# Convert list of rows where each column is a string,
# into a list of list of integer where each is the width
# of the column string.
(defun 'column_widths 'rows
  (map
    (lambda 'row
      (map (lambda 'column (len column)) row)
    )
    rows
  )
)

(defun 'print_aligned 'lines 'alignment
  (letrec
    'rows
      (map (lambda 's (split s "$")) lines)
    'min_widths
      (min_col_widths (column_widths rows))
    (none
      (map
        (lambda 'row (print_aligned_row row min_widths alignment))
        rows
      )
    )
  )
)

# TODO: we get stack overflow if we try to split too large a string so
# I've pre split the lines here. We can split on $ without overflow.
(let 'in (list "Given$a$text$file$of$many$lines,$where$fields$within$a$line$"
               "are$delineated$by$a$single$'dollar'$character,$write$a$program"
               "that$aligns$each$column$of$fields$by$ensuring$that$words$in$each$"
               "column$are$separated$by$at$least$one$space."
               "Further,$allow$for$each$word$in$a$column$to$be$either$left$"
               "justified,$right$justified,$or$center$justified$within$its$column.")
  (body
    (print "Left aligned:")
    (print_aligned in 0)
    (print "Right aligned:")
    (print_aligned in 1)
  )
)

## "Left aligned:"
## " Given      a          text       file   of     many      lines,     where    fields  within  a      line "
## " are        delineated by         a      single 'dollar'  character, write    a       program"
## " that       aligns     each       column of     fields    by         ensuring that    words   in     each "
## " column     are        separated  by     at     least     one        space.  "
## " Further,   allow      for        each   word   in        a          column   to      be      either left "
## " justified, right      justified, or     center justified within     its      column."
## "Right aligned:"
## "      Given          a       text   file     of      many     lines,    where  fields  within      a line "
## "        are delineated         by      a single  'dollar' character,    write       a program"
## "       that     aligns       each column     of    fields         by ensuring    that   words     in each "
## "     column        are  separated     by     at     least        one   space."
## "   Further,      allow        for   each   word        in          a   column      to      be either left "
## " justified,      right justified,     or center justified     within      its column."
## Return value: none
